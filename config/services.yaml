# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    password.encoder.cost: 12

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #TESTS
    App\Tests\Extra\FixtureLoader:
        autowire: true
        public: true

    functional_test.security.helper:
        alias: security.helper
        public: true

    #ADAPTERS
    App\ThirdParty\Adapter\Symfony\PasswordEncoderAdapter:
        public: true
        arguments:
            - '@Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder'

    App\ThirdParty\Adapter\Symfony\SecurityAdapter:
        public: true
        arguments:
            - '@Symfony\Component\Security\Core\Security'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\NoteRepositoryImpl'

    Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder:
        public: true
        arguments:
          - '%password.encoder.cost%'


    #Create Note
    App\Controller\CreateNoteController:
        public: true
        arguments:
            - '@App\Domain\UseCase\CreateNoteUseCase'
            - '@App\ThirdParty\Adapter\Symfony\RequestAdapter'

    App\Domain\UseCase\CreateNoteUseCase:
        public: false
        arguments:
            - '@App\Domain\Service\Responder\CreateNoteResponder'
            - '@App\Domain\Service\Factory\NoteFactory'

    App\Domain\Service\Factory\NoteFactory:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\SecurityAdapter'

    App\Domain\Service\Responder\CreateNoteResponder:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\ValidatorAdapter'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\NoteRepositoryImpl'

    #Single Note Retrieve
    App\Controller\RetrieveNoteController:
        public: true
        arguments:
            - '@App\Domain\UseCase\RetrieveNoteUseCase'
            - '@App\ThirdParty\Adapter\Symfony\RequestAdapter'

    App\Domain\UseCase\RetrieveNoteUseCase:
        public: false
        arguments:
            - '@App\Domain\Service\Responder\RetrieveNoteResponder'
            - '@App\Domain\Service\Security\OwnershipImpl'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\NoteRepositoryImpl'

    App\Domain\Service\Responder\RetrieveNoteResponder:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\TranslatorAdapter'

    #Note Update
    App\Controller\UpdateNoteController:
        public: true
        arguments:
            - '@App\Domain\UseCase\UpdateNoteUseCase'
            - '@App\ThirdParty\Adapter\Symfony\RequestAdapter'

    App\Domain\UseCase\UpdateNoteUseCase:
        public: false
        arguments:
            - '@App\Domain\Service\Responder\UpdateNoteResponder'
            - '@App\Domain\Service\Factory\NoteFactory'
            - '@App\Domain\Service\Security\OwnershipImpl'

    App\Domain\Service\Responder\UpdateNoteResponder:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\ValidatorAdapter'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\NoteRepositoryImpl'

    #Note Deleter
    App\Controller\DeleteNoteController:
        public: true
        arguments:
            - '@App\Domain\UseCase\DeleteNoteUseCase'
            - '@App\ThirdParty\Adapter\Symfony\RequestAdapter'

    App\Domain\UseCase\DeleteNoteUseCase:
        public: false
        arguments:
            - '@App\Domain\Service\Responder\DeleteNoteResponder'
            - '@App\Domain\Service\Security\OwnershipImpl'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\NoteRepositoryImpl'

    App\Domain\Service\Responder\DeleteNoteResponder:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\TranslatorAdapter'


    #Create User
    App\Controller\CreateUserController:
        public: true
        arguments:
            - '@App\Domain\UseCase\CreateUserUseCase'
            - '@App\ThirdParty\Adapter\Symfony\RequestAdapter'

    App\Domain\UseCase\CreateUserUseCase:
        public: false
        arguments:
            - '@App\Domain\Service\Responder\CreateUserResponder'
            - '@App\Domain\Service\Factory\UserFactory'

    App\Domain\Service\Responder\CreateUserResponder:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\ValidatorAdapter'
            - '@App\Domain\Service\CreateUserSuccessHookImpl'

    App\Domain\Service\CreateUserSuccessHookImpl:
        public: false
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\PasswordEncoderAdapter'
            - '@App\ThirdParty\Persistence\Doctrine\Repository\UserRepositoryImpl'


    #Events
    kernel.listener.exception:
        class: App\ThirdParty\Event\Listener\Symfony\ExceptionListener
        arguments:
            - '@App\ThirdParty\Adapter\Symfony\TranslatorAdapter'
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }
